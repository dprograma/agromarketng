generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String            @id @default(cuid())
  name               String            @db.VarChar(255)
  email              String            @unique @db.VarChar(255)
  password           String?           @db.VarChar(255)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  verified           Boolean           @default(false)
  emailVerified      DateTime?
  image              String?
  subscriptionPlanId String?
  role               String            @default("user")
  accounts           Account[]
  ads                Ad[]
  Agent              Agent?
  invoices           Invoice[]
  notifications      Notification[]
  paymentMethods     PaymentMethod[]
  sessions           Session[]
  supportTickets     SupportTicket[]
  transactions       Transaction[]
  conversationsAsBuyer Conversation[] @relation("BuyerConversations")
  conversationsAsSeller Conversation[] @relation("SellerConversations")
  sentMessages       Message[]
  sentSupportMessages SupportMessage[] @relation("SupportMessageSender") // New relation for support messages
  subscriptionPlan   SubscriptionPlan? @relation("UserSubscription", fields: [subscriptionPlanId], references: [id])
}

model Ad {
  id                 String            @id @default(cuid())
  title              String
  category           String
  location           String
  description        String
  contact            String
  userId             String
  subscriptionPlanId String?
  createdAt          DateTime          @default(now())
  images             String[]
  updatedAt          DateTime          @updatedAt
  price              Decimal           @db.Decimal(10, 2)
  boostEndDate       DateTime?
  boostMultiplier    Float             @default(1.0)
  boostStartDate     DateTime?
  boostStatus        String?           @default("inactive")
  boostType          Int?
  clicks             Int               @default(0)
  exclusivePlacement Boolean           @default(false)
  featured           Boolean           @default(false)
  featuredOnHome     Boolean           @default(false)
  listingPriority    Int               @default(0)
  shares             Int               @default(0)
  status             String            @default("Pending")
  topOfCategory      Boolean           @default(false)
  views              Int               @default(0)
  section            String?
  subcategory        String?
  subscriptionPlan   SubscriptionPlan? @relation("AdSubscription", fields: [subscriptionPlanId], references: [id])
  user               User              @relation(fields: [userId], references: [id])
  conversations      Conversation[]

  @@index([category])
  @@index([location])
  @@index([createdAt])
  @@index([price])
}

model SubscriptionPlan {
  id              String        @id @default(cuid())
  name            String
  expiryDate      DateTime
  price           Decimal       @db.Decimal(10, 2)
  benefits        String[]
  duration        Int           @default(30)
  features        Json
  listingPriority Int           @default(0)
  ads             Ad[]          @relation("AdSubscription")
  invoices        Invoice[]
  transactions    Transaction[]
  users           User[]        @relation("UserSubscription")
}

model Transaction {
  id                 String            @id @default(cuid())
  userId             String
  amount             Decimal           @db.Decimal(10, 2)
  currency           String            @default("NGN")
  status             String
  type               String
  reference          String            @unique
  paymentMethod      String?
  paymentGateway     String            @default("paystack")
  subscriptionPlanId String?
  metadata           Json?
  invoiceId          String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  invoice            Invoice?          @relation(fields: [invoiceId], references: [id])
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  user               User              @relation(fields: [userId], references: [id])
}

model Invoice {
  id                 String            @id @default(cuid())
  userId             String
  invoiceNumber      String            @unique
  amount             Decimal           @db.Decimal(10, 2)
  currency           String            @default("NGN")
  status             String
  dueDate            DateTime
  paidDate           DateTime?
  items              Json
  subscriptionPlanId String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  user               User              @relation(fields: [userId], references: [id])
  transactions       Transaction[]
}

model PaymentMethod {
  id            String   @id @default(cuid())
  userId        String
  type          String
  provider      String
  last4         String?
  expiryMonth   Int?
  expiryYear    Int?
  isDefault     Boolean  @default(false)
  token         String?
  email         String?
  accountName   String?
  accountNumber String?
  bankName      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  token_type        String?
  id_token          String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model SupportTicket {
  id          String           @id @default(cuid())
  subject     String
  priority    String
  category    String
  status      String           @default("open")
  attachments String[]
  userId      String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User             @relation(fields: [userId], references: [id])
  messages    SupportMessage[] // Relation to SupportMessage model
}

model SupportMessage {
  id            String        @id @default(cuid())
  ticketId      String
  senderId      String
  content       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  ticket        SupportTicket @relation(fields: [ticketId], references: [id])
  sender        User          @relation("SupportMessageSender", fields: [senderId], references: [id])
  isAgentReply  Boolean       @default(false) // To distinguish agent replies
}


model Conversation {
  id          String    @id @default(cuid())
  adId        String
  buyerId     String
  sellerId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ad          Ad        @relation(fields: [adId], references: [id])
  buyer       User      @relation("BuyerConversations", fields: [buyerId], references: [id])
  seller      User      @relation("SellerConversations", fields: [sellerId], references: [id])
  messages    Message[]

  @@unique([adId, buyerId]) // Ensure only one conversation per ad per buyer
  @@index([buyerId])
  @@index([sellerId])
  @@index([updatedAt])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
}

model Agent {
  id          String        @id @default(cuid())
  userId      String        @unique
  isOnline    Boolean       @default(false)
  isAvailable Boolean       @default(true)
  activeChats Int           @default(0)
  lastActive  DateTime      @default(now())
  specialties String[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
}

model Newsletter {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  isConfirmed Boolean  @default(false)
  token       String?  @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  time      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
