// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password  String?   @db.VarChar(255)
  verified  Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ads        Ad[]
  subscriptionPlanId String?
  subscriptionPlan SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
}

model Ad {
  id        String   @id @default(cuid())
  title     String
  category  String
  location  String
  price     String
  description String
  contact   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  subscriptionPlanId String?
  subscriptionPlan SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  price       String
  expiryDate  DateTime
  ads         Ad[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  provider          String
  providerAccountId String
  type              String
  refresh_token     String?  // Optional
  access_token      String?  // Optional
  expires_at        Int?     // Optional
  scope             String?  // Optional
  token_type        String?  // Optional
  id_token          String?  // Optional
  user              User     @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId]) 
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  @@unique([identifier, token])
}
