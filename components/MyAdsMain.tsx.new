"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardFooter, CardHeader } from "@/components/ui/card";
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger, DisableableDropdownMenuItem } from "@/components/ui/dropdown-menu";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import {
  Eye, Star, TrendingUp, MoreVertical, CheckCircle, Clock, XCircle,
  Search, PlusCircle, Filter, ChevronLeft, ChevronRight, AlertCircle,
  Share2, Edit, Trash2, BarChart2
} from "lucide-react";
import { Ad, SubscriptionPlan, MyAdsResponse } from '@/types';
import { showToast } from "@/lib/toast-utils";
import BoostAdModal from '@/components/BoostAdModal';
import { formatCurrency } from '@/lib/utils';
import { motion, AnimatePresence } from "framer-motion";
import Image from "next/image";
import Alert from '@/components/Alerts';

export default function MyAdsManagement() {
  const router = useRouter();
  const [ads, setAds] = useState<Ad[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [isLoading, setIsLoading] = useState(true);
  const itemsPerPage = 6; // Increased from 5 to 6 for better grid layout
  const [alerts, setAlerts] = useState<boolean>(false);
  const [alertMessages, setAlertMessages] = useState<string | undefined>();
  const [alertTypes, setAlertTypes] = useState<string | undefined>();
  const [isBoostModalOpen, setIsBoostModalOpen] = useState(false);
  const [selectedAd, setSelectedAd] = useState<Ad | null>(null);
  const [subscription, setSubscription] = useState<SubscriptionPlan | null>(null);
  const [maxFreeAds, setMaxFreeAds] = useState<number>(5);
  const [statusFilter, setStatusFilter] = useState<string>('all');

  // Fetch ads from the database
  useEffect(() => {
    const fetchAds = async () => {
      try {
        setIsLoading(true);
        const response = await fetch('/api/ads/my-ads');

        if (!response.ok) {
          setAlerts(true);
          setAlertTypes('error');
          setAlertMessages('Failed to fetch ads');
          return;
        }

        const data: MyAdsResponse = await response.json();

        // Check if data contains ads array
        if (data && Array.isArray(data.ads)) {
          setAds(data.ads);
          setSubscription(data.subscription);
          setMaxFreeAds(data.maxFreeAds);
          setAlerts(false);
        } else {
          setAlerts(true);
          setAlertTypes('error');
          setAlertMessages('Invalid data format received');
        }
      } catch (error) {
        setAlerts(true);
        setAlertTypes('error');
        setAlertMessages('Failed to fetch ads');
        setAds([]);
      } finally {
        setIsLoading(false);
      }
    };

    fetchAds();
  }, []);

  // Add subscription check for new ad button
  const canAddNewAd = subscription || ads.length < maxFreeAds;

  // Handle search and filter functionality
  const filteredAds = ads.filter(
    (ad) => {
      const matchesSearch = ad.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        ad.price.toString().includes(searchTerm.toLowerCase()) ||
        ad.category.toLowerCase().includes(searchTerm.toLowerCase());

      const matchesStatus = statusFilter === 'all' || ad.status === statusFilter;

      return matchesSearch && matchesStatus;
    }
  );

  // Handle pagination
  const startIndex = (currentPage - 1) * itemsPerPage;
  const currentAds = filteredAds.slice(startIndex, startIndex + itemsPerPage);

  // Update ad status
  const updateStatus = async (id: string, newStatus: string) => {
    try {
      const response = await fetch(`/api/ads/${id}/status`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ status: newStatus }),
      });

      const data = await response.json();

      if (!response.ok) {
        showToast('Failed to update status', 'error');
        return;
      }

      if (data.ad) {
        setAds(ads.map((ad) =>
          ad.id === id ? { ...ad, status: data.ad.status } : ad
        ));

        // Show success message
        showToast(data.message || 'Status updated successfully', 'success');
      }
    } catch (error) {
      showToast(error instanceof Error ? error.message : 'Error updating status', 'error');
    }
  };

  const handleBoostAd = async (adId: string, boostType: number, duration: number) => {
    try {
      const response = await fetch(`/api/ads/${adId}/boost`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ boostType, duration }),
      });

      const data = await response.json();

      if (!response.ok) {
        // Handle subscription required case
        if (response.status === 403 && data.status === 'SUBSCRIPTION_REQUIRED') {
          showToast('Subscription required to boost ads', 'warning');

          // Close boost modal
          setIsBoostModalOpen(false);
          setSelectedAd(null);

          // Store ad info in sessionStorage for after subscription
          sessionStorage.setItem('pendingBoost', JSON.stringify({
            adId,
            boostType,
            duration
          }));

          // Redirect to promotions page
          router.push(data.redirectUrl);
          return;
        }

        throw new Error(data.error || 'Failed to boost ad');
      }

      // Update local state if successful
      setAds(ads.map((ad) =>
        ad.id === adId ? { ...ad, featured: true, status: 'Active' } : ad
      ));

      showToast('Ad boosted successfully!', 'success');
    } catch (error) {
      showToast(error instanceof Error ? error.message : 'Error boosting ad', 'error');
    }
  };

  const handleFeature = async (ad: Ad) => {
    if (!ad.featured) {
      setSelectedAd(ad);
      setIsBoostModalOpen(true);
    }
  };

  const updateAnalytics = async (id: string, type: 'views' | 'clicks' | 'shares') => {
    try {
      const response = await fetch(`/api/ads/${id}/analytics`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ type }),
      });

      if (!response.ok) {
        showToast('Failed to update analytics', 'error');
        return;
      }

      const { ad } = await response.json();

      // Update the local state with new analytics
      setAds(ads.map((currentAd) =>
        currentAd.id === id ? { ...currentAd, [type]: ad[type] } : currentAd
      ));
    } catch (error) {
      showToast(`Error updating ${type}: ${error}`, 'error');
    }
  };

  const handleView = (id: string) => {
    updateAnalytics(id, 'views');
  };

  const handleClick = (id: string) => {
    updateAnalytics(id, 'clicks');
  };

  const handleShare = async (id: string) => {
    const ad = ads.find(ad => ad.id === id);
    if (!ad) return;

    try {
      // Use Web Share API if available
      if (navigator.share) {
        await navigator.share({
          title: ad.title,
          text: `Check out this ad: ${ad.title}`,
          url: `${window.location.origin}/ads/${ad.id}`,
        });
        updateAnalytics(id, 'shares');
      } else {
        // Fallback to copying to clipboard
        await navigator.clipboard.writeText(`${window.location.origin}/ads/${ad.id}`);
        showToast('Ad link copied to clipboard!', 'success');
        updateAnalytics(id, 'shares');
      }
    } catch (error) {
      showToast('Error sharing: ' + error, 'error');
    }
  };

  const handlePrevPage = () => {
    if (currentPage > 1) setCurrentPage(currentPage - 1);
  };

  const handleNextPage = () => {
    if (currentPage < Math.ceil(filteredAds.length / itemsPerPage)) {
      setCurrentPage(currentPage + 1);
    }
  };

  if (isLoading) {
    return (
      <div className="container mx-auto p-6 space-y-6">
        <h1 className="text-3xl font-bold text-gray-900 mb-6">My Ads</h1>
        <div className="flex justify-center items-center h-64">
          <div className="flex flex-col items-center">
            <div className="animate-spin rounded-full h-10 w-10 border-b-2 border-green-700"></div>
            <p className="mt-4 text-gray-600">Loading your ads...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="container mx-auto p-6 space-y-6"
    >
      {alerts && (
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-4"
        >
          <Alert message={alertMessages || ''} type={alertTypes || ''} />
        </motion.div>
      )}

      <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
        <h1 className="text-3xl font-bold text-gray-900">My Ads</h1>
        <Button
          onClick={() => router.push('/dashboard/new-ad')}
          className={`mt-4 md:mt-0 ${canAddNewAd ? 'bg-green-600 hover:bg-green-700' : 'bg-gray-400'} text-white flex items-center gap-2`}
          disabled={!canAddNewAd}
        >
          <PlusCircle className="h-4 w-4" />
          Post New Ad
        </Button>
      </div>

      <div className="bg-white rounded-xl shadow-md overflow-hidden border border-gray-200">
        <div className="p-6 border-b border-gray-200">
          <div className="flex flex-col md:flex-row justify-between gap-4">
            <div className="relative flex-grow max-w-md">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                placeholder="Search by title, price, or category..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 w-full px-4 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
              />
            </div>

            <div className="flex items-center gap-2">
              <select
                className="px-3 py-2.5 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500"
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
              >
                <option value="all">All Status</option>
                <option value="Active">Active</option>
                <option value="Pending">Pending</option>
                <option value="Inactive">Inactive</option>
                <option value="Sold">Sold</option>
              </select>
            </div>
          </div>
        </div>

        <div className="overflow-x-auto">
          {ads.length === 0 ? (
            <div className="text-center py-16 px-4">
              <div className="mx-auto h-24 w-24 text-gray-400 mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
              </div>
              <h3 className="text-lg font-medium text-gray-900">No ads found</h3>
              <p className="mt-2 text-gray-500 max-w-md mx-auto">
                You haven't posted any ads yet. Create your first ad to start selling your products or services.
              </p>
              <div className="mt-6">
                <Button
                  onClick={() => router.push('/dashboard/new-ad')}
                  className="bg-green-600 hover:bg-green-700 text-white"
                >
                  Post Your First Ad
                </Button>
              </div>
            </div>
          ) : filteredAds.length === 0 ? (
            <div className="text-center py-16 px-4">
              <div className="mx-auto h-16 w-16 text-gray-400 mb-4">
                <Search className="h-16 w-16" />
              </div>
              <h3 className="text-lg font-medium text-gray-900">No matching ads found</h3>
              <p className="mt-2 text-gray-500 max-w-md mx-auto">
                Try adjusting your search or filter criteria to find what you're looking for.
              </p>
              <div className="mt-6">
                <Button
                  onClick={() => {
                    setSearchTerm('');
                    setStatusFilter('all');
                  }}
                  variant="outline"
                >
                  Clear Filters
                </Button>
              </div>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6">
              <AnimatePresence>
                {currentAds.map((ad, index) => (
                  <motion.div
                    key={ad.id}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, scale: 0.95 }}
                    transition={{ duration: 0.2, delay: index * 0.05 }}
                    className="bg-white rounded-lg overflow-hidden border border-gray-200 shadow-sm hover:shadow-md transition-shadow"
                  >
                    <div className="relative aspect-video bg-gray-100">
                      {ad.images && ad.images.length > 0 ? (
                        <Image
                          src={ad.images[0]}
                          alt={ad.title}
                          fill
                          className="object-cover"
                        />
                      ) : (
                        <div className="absolute inset-0 flex items-center justify-center text-gray-400">
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                          </svg>
                        </div>
                      )}

                      <div className="absolute top-2 right-2">
                        <Badge
                          className={`px-2 py-1 text-xs font-medium ${
                            ad.status === "Active" ? "bg-green-100 text-green-800 border border-green-200" :
                            ad.status === "Pending" ? "bg-yellow-100 text-yellow-800 border border-yellow-200" :
                            ad.status === "Sold" ? "bg-blue-100 text-blue-800 border border-blue-200" :
                            "bg-gray-100 text-gray-800 border border-gray-200"
                          }`}
                        >
                          {ad.status}
                        </Badge>
                      </div>

                      {ad.featured && (
                        <div className="absolute top-2 left-2">
                          <Badge className="bg-purple-100 text-purple-800 border border-purple-200 px-2 py-1 text-xs font-medium">
                            Featured
                          </Badge>
                        </div>
                      )}
                    </div>

                    <div className="p-4">
                      <h3 className="font-semibold text-gray-900 text-lg mb-1 truncate">{ad.title}</h3>
                      <p className="text-green-600 font-medium">{formatCurrency(Number(ad.price))}</p>

                      <div className="mt-3 flex items-center text-sm text-gray-500">
                        <div className="flex items-center mr-4">
                          <Eye className="h-4 w-4 mr-1 text-gray-400" />
                          <span>{ad.views || 0}</span>
                        </div>
                        <div className="flex items-center mr-4">
                          <TrendingUp className="h-4 w-4 mr-1 text-gray-400" />
                          <span>{ad.clicks || 0}</span>
                        </div>
                        <div className="flex items-center">
                          <Share2 className="h-4 w-4 mr-1 text-gray-400" />
                          <span>{ad.shares || 0}</span>
                        </div>
                      </div>

                      <div className="mt-4 flex justify-between items-center">
                        <div className="flex space-x-2">
                          <Button
                            variant="outline"
                            size="sm"
                            className="flex items-center gap-1 text-xs"
                            onClick={() => router.push(`/dashboard/edit-ad/${ad.id}`)}
                          >
                            <Edit className="h-3 w-3" />
                            Edit
                          </Button>

                          <Button
                            variant="outline"
                            size="sm"
                            className="flex items-center gap-1 text-xs"
                            onClick={() => handleShare(ad.id)}
                          >
                            <Share2 className="h-3 w-3" />
                            Share
                          </Button>
                        </div>

                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="sm" className="h-8 w-8 p-0">
                              <MoreVertical className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>

                          <DropdownMenuContent align="end" className="w-48">
                            <DisableableDropdownMenuItem
                              onClick={() => updateStatus(ad.id, "Sold")}
                              className="flex items-center gap-2 cursor-pointer"
                              disabled={ad.status === "Sold"}
                            >
                              <CheckCircle className={`h-4 w-4 ${ad.status === "Sold" ? "text-gray-400" : "text-green-500"}`} />
                              <span>Mark as Sold</span>
                            </DisableableDropdownMenuItem>

                            <DisableableDropdownMenuItem
                              onClick={() => updateStatus(ad.id, "Active")}
                              className="flex items-center gap-2 cursor-pointer"
                              disabled={ad.status === "Active"}
                            >
                              <Clock className={`h-4 w-4 ${ad.status === "Active" ? "text-gray-400" : "text-yellow-500"}`} />
                              <span>Set as Active</span>
                            </DisableableDropdownMenuItem>

                            <DisableableDropdownMenuItem
                              onClick={() => updateStatus(ad.id, "Inactive")}
                              className="flex items-center gap-2 cursor-pointer"
                              disabled={ad.status === "Inactive"}
                            >
                              <XCircle className={`h-4 w-4 ${ad.status === "Inactive" ? "text-gray-400" : "text-gray-500"}`} />
                              <span>Mark as Inactive</span>
                            </DisableableDropdownMenuItem>

                            <DisableableDropdownMenuItem
                              onClick={() => handleFeature(ad)}
                              className="flex items-center gap-2 cursor-pointer"
                              disabled={ad.featured}
                            >
                              <Star className={`h-4 w-4 ${ad.featured ? "text-gray-400" : "text-purple-500"}`} />
                              <span>{ad.featured ? "Featured" : "Upgrade to Featured"}</span>
                            </DisableableDropdownMenuItem>
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </div>
                    </div>
                  </motion.div>
                ))}
              </AnimatePresence>
            </div>
          )}
        </div>

        {!subscription && ads.length >= maxFreeAds && (
          <div className="px-6 py-4 bg-yellow-50 border-t border-yellow-200">
            <div className="flex items-start">
              <AlertCircle className="h-5 w-5 text-yellow-500 mt-0.5 mr-3" />
              <div>
                <p className="text-sm font-medium text-yellow-800">
                  You've reached your free ad limit ({maxFreeAds}).
                </p>
                <p className="text-sm text-yellow-700 mt-1">
                  Subscribe to post more ads and unlock premium features!
                </p>
                <Button
                  onClick={() => router.push('/dashboard/subscription')}
                  className="mt-2 bg-yellow-500 hover:bg-yellow-600 text-white text-sm"
                  size="sm"
                >
                  View Subscription Plans
                </Button>
              </div>
            </div>
          </div>
        )}

        {filteredAds.length > 0 && (
          <div className="flex justify-between items-center p-4 border-t border-gray-200">
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={handlePrevPage}
                disabled={currentPage === 1}
                className="h-8 w-8 p-0"
              >
                <ChevronLeft className="h-4 w-4" />
              </Button>

              <span className="text-sm text-gray-600">
                Page {currentPage} of {Math.ceil(filteredAds.length / itemsPerPage)}
              </span>

              <Button
                variant="outline"
                size="sm"
                onClick={handleNextPage}
                disabled={currentPage >= Math.ceil(filteredAds.length / itemsPerPage)}
                className="h-8 w-8 p-0"
              >
                <ChevronRight className="h-4 w-4" />
              </Button>
            </div>

            <div className="text-sm text-gray-500">
              Showing {Math.min(startIndex + 1, filteredAds.length)} - {Math.min(startIndex + itemsPerPage, filteredAds.length)} of {filteredAds.length} ads
            </div>
          </div>
        )}
      </div>

      {selectedAd && (
        <BoostAdModal
          isOpen={isBoostModalOpen}
          onClose={() => {
            setIsBoostModalOpen(false);
            setSelectedAd(null);
          }}
          ad={selectedAd}
          onBoost={handleBoostAd}
        />
      )}
    </motion.div>
  );
